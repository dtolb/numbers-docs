!fileScope external

description:   |
    The *+subscriptions+* resource is used to create e-mail or callback subscriptions. The subscriptions will notify the user about events
    concerning specific orders or orders of a specific type.<br>

    E-mail subscriptions can be configured to sent emails immediately after an event occurred or on daily basis as a digest with all events
    of the previous day. Callback notifications will always be send immediately.

!scope external
get:
    description: |
        GET is used to retrieve all subscriptions for the account (including email and callback subscriptions).
        The returned information reflects the subscription as it has been defined, and for callback subscriptions will reflect the status of the latest attempt to place the callback.  The <Status> element will indicate if an error is being encountered when the Bandwidth Dashboard attempts to place the callback.

    responses:
        200:
            description: The subscriptions retrieval request will return a list of the subscriptions that are created on this account.
            body:
                application/xml:
                    example: |
                        <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                            <SubscriptionsResponse>
                                <Subscriptions>
                                    <Subscription>
                                        <SubscriptionId>0b3aa54d-0ce5-4f5b-bd75-1c30967b197f</SubscriptionId>
                                        <OrderType>orders</OrderType>
                                        <EmailSubscription>
                                            <Email>bwtest@gmail.com</Email>
                                            <DigestRequested>NONE</DigestRequested>
                                        </EmailSubscription>
                                    </Subscription>
                                    <Subscription>
                                        <SubscriptionId>ddf05927-780f-4f8f-89ab-e581f52f5f20</SubscriptionId>
                                        <CallbackSubscription>
                                            <URL>"https://company.com/iriscallback"</URL>
                                            <Expiry>30000</Expiry>
                                            <Status>some message containing status code and response body of last callback</Status>
                                            <CallbackCredentials>
                                                <BasicAuthentication>
                                                    <Username>iris</Username>
                                                </BasicAuthentication>
                                            </CallbackCredentials>
                                        </CallbackSubscription>
                                    </Subscription>
                                </Subscriptions>
                            </SubscriptionsResponse>

        400:
            description: if the account specified does not exist or is locked it will result in a bad request

post:
    description: |
        A POST on the /subscriptions resource is used to request a new subscription for an account.<br>

        The POST creates a new e-mail or callback subscription. A well-formed POST will create a subscription resource, and return a
        subscription ID as part of the location header. The ID is used to uniquely identify the subscription.
        The user should submit the desired e-mail address for notifications and the frequency with which he wants to get the updates:
        DAILY (for daily digests) or NONE (immediately after events). OrderId is optional. If OrderId is specified only notifications will
        be sent for events related to that order. If OrderId is omitted, notifications will be sent related to events of all orders of the specified type.<br>

        For email subscriptions use a body like this:<br>

        ```
        <Subscription>
            <OrderType> [ portins | portouts | orders | disconnects | dldas | lsrorders | e911s | tnoptions | externalTns] </OrderType> <!-- required -->
            <OrderId> [ UUID ] </OrderId> <!-- optional, if provided notifications will only be sent for events regarding this specific order, if omitted notifications regarding events for all orders of the specified type will be sent -->
            <EmailSubscription>
                <Email> [ email address] </Email>
                <DigestRequested> [ NONE | DAILY ] </DigestRequested> <!-- required -->
            </EmailSubscription>
        </Subscription>
        ```

        For callback subscriptions use a body like this:<br>

        ```
        <Subscription>
            <OrderType> [portins | portouts | orders | disconnects | dldas | lsrorders | e911s | tnoptions | externalTns] </OrderType> <!-- same rules and values as above -->
            <OrderId> [UUID]</OrderId> <!-- same rules and value as above -->
            <CallbackSubscription>
                <URL> [valid publically addressable URL] </URL> <!-- the URL that notifications should get POSTed to, HTTPS is highly recommended -->
                <Expiry> [time in seconds] </Expiry> <!-- the number of seconds after which to expire this subscription -->
                <CallbackCredentials> <!-- optional, but recommended; these credentials will be used to when authenticating with the notification receiving server -->
                    <BasicAuthentication> <!-- optional, the endpoint may be secured with BASIC auth -->
                        <Username> [username] </Username> <!-- max 100 characters -->
                        <Password> [password] </Password> <!-- the password will be stored encrypted and never returned via the API -->
                    </BasicAuthentication>
                    <!-- optional, a BASE64 encoded public key matching the notification receiving server -->
                    <PublicKey>LS0tLS1CRUdJTiBDRVJUSUZJ [...] kQgQ0VSVElGSUNBVEUtLS0tLQ0K</PublicKey>
                </CallbackCredentials>
            </CallbackSubscription>
        </Subscription>
        ```
        The credentials used to impose security on the callbacks are defined in the <CallbackCredentials> element.  The Basic authentication is straightforward, but the <PublicKey> requires a little more explanation.  Please see the document to the left on Mutual Authentication for CallBacks.<p>

        When an event happens that had been subscribed to with a callback subscription (order update, note added to order), the following payload
        will be POSTed to the URL of the callback subscription.<br>More detail can be found in the API documentation for the fictitious endpoint /callbacks

        ```xml
        <Notification>
            <SubscriptionId>...</SubscriptionId>
            <OrderType>portins | portouts | orders | disconnects | dldas | lsrorders | e911s| tnoptions | externalTns</OrderType>
            <OrderId>...</OrderId>
            <!-- for order update events -->
            <Status>COMPLETE | FAILED | PARTIAL | EXCEPTION ... </Status>
            <!-- for order update events -->
            <Message>...</Message>
            <!-- for note events -->
            <Note>...</Note>
            <!-- for portins/portouts/orders/disconnects OrderTypes -->
            <CompletedTelephoneNumbers>
                <TelephoneNumber> ... </TelephoneNumber>
                <!-- ... -->
            </CompletedTelephoneNumbers>
        </Notification>
        ```

    body:
        application/xml:
            example: |
                <!-- for an email subscription -->
                <?xml version="1.0"?>
                <Subscription>
                    <OrderType>portins</OrderType>
                    <OrderId>e75dc861-95ed-427e-8688-976132a69549</OrderId>
                    <EmailSubscription>
                        <Email>newtest@gmail.com</Email>
                        <DigestRequested>DAILY</DigestRequested>
                    </EmailSubscription>
                </Subscription>

                <!-- and for a callback subscription -->
                <Subscription>
                    <OrderType>orders</OrderType>
                    <CallbackSubscription>
                        <URL>"http://yourhost:8080/path/to/resource"</URL>
                        <User>bandwidth-dashboard-user-id</User>
                        <Expiry>12000</Expiry>
                        <CallbackCredentials>
                            <BasicAuthentication>
                                <Username>superuser</Username>
                                <Password>s3cure</Password>
                            </BasicAuthentication>
                            <PublicKey>LS0tLS1CRUdJTiBDRVJUSU [...] kQgQ0VSVElGSUNBVEUtLS0tLQ0K</PublicKey>
                        </CallbackCredentials>
                    </CallbackSubscription>
                </Subscription>

    responses:
        201:
            description: if the subscription is successfully created a CREATED response code will be returned

        400:
            description: if the account specified does not exist or is locked it will result in a bad request

        404:
            description: if the subscription validation failed (e.g. invalid URL, invalid expiration date, invalid public key)

        409:
            description: if the subscription for this subscription target already exits it will result in a CONFLICT response

/{subscriptionid}: !include subscriptionid/subscriptionid.raml
